{"ast":null,"code":"var _jsxFileName = \"F:\\\\___ReactJS Exam\\\\react-exam\\\\src\\\\markup\\\\Pages\\\\Sound\\\\SoundInputField.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SoundInputField = () => {\n  _s();\n\n  const [audioContext, setAudioContext] = useState(null);\n  const [mediaStream, setMediaStream] = useState(null);\n  const [audioRecorder, setAudioRecorder] = useState(null);\n  const [chunks, setChunks] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  useEffect(() => {\n    const initializeAudio = async () => {\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      setAudioContext(audioContext);\n      setMediaStream(mediaStream);\n    };\n\n    initializeAudio();\n    return () => {\n      if (mediaStream) {\n        mediaStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  const handleStart = () => {\n    if (audioContext && mediaStream && !isRecording) {\n      const audioSource = audioContext.createMediaStreamSource(mediaStream);\n      const audioRecorder = new MediaRecorder(audioSource);\n      const chunks = [];\n      audioRecorder.addEventListener('dataavailable', event => {\n        chunks.push(event.data);\n      });\n      audioRecorder.addEventListener('stop', () => {\n        setChunks(chunks);\n        setIsRecording(false);\n      });\n      audioRecorder.start();\n      setIsRecording(true);\n      setAudioRecorder(audioRecorder);\n    }\n  };\n\n  const handleStop = () => {\n    if (audioRecorder && isRecording) {\n      audioRecorder.stop();\n    }\n  };\n\n  const handlePlay = () => {\n    if (chunks.length > 0) {\n      const audioData = new Blob(chunks, {\n        type: 'audio/webm'\n      });\n      const audioUrl = URL.createObjectURL(audioData);\n      const audioElement = new Audio(audioUrl);\n      audioElement.play();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: \"controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mr-2\",\n        onClick: handleStart,\n        disabled: isRecording,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary mr-2\",\n        onClick: handleStop,\n        disabled: !isRecording,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success mr-2\",\n        onClick: handlePlay,\n        children: \"Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SoundInputField, \"XcVw2MYuCrgu7ldJQRAv1BKoUTM=\");\n\n_c = SoundInputField;\nexport default SoundInputField;\n\nvar _c;\n\n$RefreshReg$(_c, \"SoundInputField\");","map":{"version":3,"sources":["F:/___ReactJS Exam/react-exam/src/markup/Pages/Sound/SoundInputField.js"],"names":["React","useState","useEffect","SoundInputField","audioContext","setAudioContext","mediaStream","setMediaStream","audioRecorder","setAudioRecorder","chunks","setChunks","isRecording","setIsRecording","initializeAudio","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","handleStart","audioSource","createMediaStreamSource","MediaRecorder","addEventListener","event","push","data","start","handleStop","handlePlay","length","audioData","Blob","type","audioUrl","URL","createObjectURL","audioElement","Audio","play"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst SoundInputField = () => {\r\n  const [audioContext, setAudioContext] = useState(null);\r\n  const [mediaStream, setMediaStream] = useState(null);\r\n  const [audioRecorder, setAudioRecorder] = useState(null);\r\n  const [chunks, setChunks] = useState([]);\r\n  const [isRecording, setIsRecording] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const initializeAudio = async () => {\r\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n      const mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n\r\n      setAudioContext(audioContext);\r\n      setMediaStream(mediaStream);\r\n    };\r\n\r\n    initializeAudio();\r\n\r\n    return () => {\r\n      if (mediaStream) {\r\n        mediaStream.getTracks().forEach((track) => track.stop());\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleStart = () => {\r\n    if (audioContext && mediaStream && !isRecording) {\r\n      const audioSource = audioContext.createMediaStreamSource(mediaStream);\r\n      const audioRecorder = new MediaRecorder(audioSource);\r\n      const chunks = [];\r\n\r\n      audioRecorder.addEventListener('dataavailable', (event) => {\r\n        chunks.push(event.data);\r\n      });\r\n\r\n      audioRecorder.addEventListener('stop', () => {\r\n        setChunks(chunks);\r\n        setIsRecording(false);\r\n      });\r\n\r\n      audioRecorder.start();\r\n      setIsRecording(true);\r\n      setAudioRecorder(audioRecorder);\r\n    }\r\n  };\r\n\r\n  const handleStop = () => {\r\n    if (audioRecorder && isRecording) {\r\n      audioRecorder.stop();\r\n    }\r\n  };\r\n\r\n  const handlePlay = () => {\r\n    if (chunks.length > 0) {\r\n      const audioData = new Blob(chunks, { type: 'audio/webm' });\r\n      const audioUrl = URL.createObjectURL(audioData);\r\n      const audioElement = new Audio(audioUrl);\r\n\r\n      audioElement.play();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n   \r\n      <div className=\"mt-3\">\r\n      <audio  controls=\"controls\" />\r\n        <button className=\"btn btn-primary mr-2\" onClick={handleStart} disabled={isRecording}>\r\n          Start\r\n        </button>\r\n        <button className=\"btn btn-secondary mr-2\" onClick={handleStop} disabled={!isRecording}>\r\n          Stop\r\n        </button>\r\n        <button className=\"btn btn-success mr-2\" onClick={handlePlay}>\r\n          Play\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SoundInputField;\r\n"]},"metadata":{},"sourceType":"module"}